{
	"name": "SCD2_FF_DB",
	"properties": {
		"folder": {
			"name": "Incremental_DF"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Ds_Azure_Blob_Emp_Csv_Data",
						"type": "DatasetReference"
					},
					"name": "EmpHist"
				},
				{
					"dataset": {
						"referenceName": "Ds_Az_ST2",
						"type": "DatasetReference"
					},
					"name": "sqlEmphist"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Ds_Az_ST2",
						"type": "DatasetReference"
					},
					"name": "Tgtinsert"
				},
				{
					"dataset": {
						"referenceName": "Ds_Az_ST2",
						"type": "DatasetReference"
					},
					"name": "TgtUpdate"
				}
			],
			"transformations": [
				{
					"name": "SrcHash"
				},
				{
					"name": "TgtHash"
				},
				{
					"name": "exists1"
				},
				{
					"name": "UpdateIsActiveTrue"
				},
				{
					"name": "ColumnReducer1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "exists3"
				},
				{
					"name": "UpdateIsActive"
				},
				{
					"name": "ColumnReducer2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          Department as string,",
				"          Salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmpHist",
				"source(output(",
				"          surr as integer,",
				"          Id as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          Department as string,",
				"          Salary as string,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqlEmphist",
				"EmpHist derive(SrcHash = md5(Id,{Name},Gender,{Country},Department,{Salary})) ~> SrcHash",
				"sqlEmphist derive(TgtHash = md5(Id,{Name},Gender,{Country},Department,{Salary})) ~> TgtHash",
				"SrcHash, TgtHash exists(SrcHash == TgtHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(IsActive = 1) ~> UpdateIsActiveTrue",
				"UpdateIsActiveTrue select(mapColumn(",
				"          Id,",
				"          Name,",
				"          Gender,",
				"          Country,",
				"          Department,",
				"          Salary,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ColumnReducer1",
				"TgtHash, SrcHash exists(sqlEmphist@Id == EmpHist@Id,",
				"     negate:false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> exists2",
				"exists2, SrcHash exists(TgtHash == SrcHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists3",
				"exists3 derive(IsActive = 0) ~> UpdateIsActive",
				"UpdateIsActive select(mapColumn(",
				"          surr,",
				"          Id,",
				"          Name,",
				"          Gender,",
				"          Country,",
				"          Department,",
				"          Salary,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ColumnReducer2",
				"ColumnReducer1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          surr as integer,",
				"          Id as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          Department as string,",
				"          Salary as string,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Tgtinsert",
				"ColumnReducer2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          surr as integer,",
				"          Id as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          Department as string,",
				"          Salary as string,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['surr'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          surr,",
				"          Id,",
				"          IsActive",
				"     )) ~> TgtUpdate"
			]
		}
	}
}